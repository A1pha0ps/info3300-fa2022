<html><head>
<title>INFO 3300 - October 19</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">
  
  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/default.min.css">
  <link rel="stylesheet" href="../css/hljs-base16.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>
  
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  <style>
  </style>

</head>
<body>
  <div class="container larger">
  <h3>Notes for October 17</h3>
  <p>
    Today we will work with multitouch displays and learn some patterns for how they differ from mouse interactions. Keep in mind that in default form the touch display will mimic a mouse, and sometimes even send events that simulate a mouse wheel if you pinch. You only need to explicitly accommodate touch if you want to handle multiple touches or you hit an edge case where that simulation falls short.
  </p>
  <p>
    This lecture is going to walk through one d3 example case taken from the d3 docs. Check them out <a href="https://observablehq.com/@d3/multitouch">here</a> and <a href="https://observablehq.com/@fil/pointer-events">here</a>.
  </p>
  <p>
    If you want to learn a bit more about gestural interactions, <a href="http://depts.washington.edu/acelab/proj/dollar/index.html">$1 gesture recognizers</a> are a decent way to start.
  </p>
  
  
  
  <h5>HTML for today:</h5>
  
  <h5>Multitouch sketch:</h5>
  <canvas id="plot" width="700" height="700" style="margin-bottom:20px" >
  </canvas>


  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>


  <!--- Code for today's class --->
  <script id="notes1">
  
  // We will start with multitouch drawing on a canvas
  //  See https://observablehq.com/@fil/pointer-events-svg for a very clever way to use GeoJSON to do this in SVG
  var canvas = d3.select('#plot')
  var context = canvas.node().getContext('2d');
  let width = canvas.attr("width");
  let height = canvas.attr("height");
  context.fillStyle = '#ddd';
  context.fillRect(0, 0, width, height);
  context.fillStyle = '#ddd';
  context.lineWidth = 2;
  context.lineCap = "round";

  canvas.on("touchmove", function(event) { event.preventDefault(); } )
        .on("pointerup", function(event) { console.log("pointerup", event); } )
        .on("pointerdown", function(event) {
          console.log("pointerdown", event);
          
          // Every time a new pointer is put down, we need to set the canvas up to track that individual finger -- while you can make some fancy logic to do this all in one event, it's much easier to set up per-finger listeners when the finger is placed on the canvas.
          
          let id = event.pointerId;
          let targetNode = event.target;
          let prevPoint = null;
          let point = d3.pointer(event, targetNode);
          let color = d3.hsl(360 * Math.random(), 0.8, 0.7).hex()
          
          // Designate the canvas to consume all touch events from here on for this finger (even if they move beyond the canvas bounds
          targetNode.setPointerCapture(id);
          
          // Make specfic events for this finger/touch
          canvas.on(`pointerup.${id} pointercancel.${id}`, evt => {
                  if (evt.pointerId !== id) return;  // check in case we didn't get this pointer's event
                  
                  // clear out the events we added for this pointer and release the event capture
                  d3.select(targetNode).on(`.${id}`, null); 
                  targetNode.releasePointerCapture(id);
                
                })
                .on(`pointermove.${id}`, evt => {
                  if (evt.pointerId !== id) return;  // check in case we didn't get this pointer's event
                  prevPoint = point;
                  point = d3.pointer(evt, targetNode);
                  if (prevPoint) {
                    context.beginPath();
                    context.lineWidth = 2;
                    context.strokeStyle = color;
                    context.moveTo(prevPoint[0], prevPoint[1]);
                    context.lineTo(...point);  // using ellipses let's us automatically unpack the array
                    context.lineCap = "round";
                    context.stroke();
                  }
                });
          
        });
               
          
          
          
        
  

  </script>
  
  
  

  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  
  function sanitize(s) {
    return s.replace("<br>", "\\n")
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
          }
    document.getElementById("display1").innerHTML = sanitize( document.getElementById("notes1").innerText);
    hljs.highlightAll();
  </script>


  </div>
</body>
</html>
